#!/bin/bash
#-------------------------------------------------------------
# Greeting, motd etc. ...
#-------------------------------------------------------------

# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.



#cd_reminder will print the name of root folder from any git repo when you will change directory on it
#to disable this function just comment the next line (put the # at the start of the line)


# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[0m"               # Color Reset

__git_complete pb _git_checkout

custom_git() {

	#if is a default git hook, like pre-commit set to true, to can be ignored by this script
	case $1 in
		commit | push | rebase)
		  is_default_hook=true;
		  ;;
		*)
		  is_default_hook=false;
		  ;;
	esac

	#run pre hooks
	run_pre_hook "$@"

	#if exist code from hook is 0 then we can continue to execute git command
	exit_code="$?"
	if [ $exit_code -eq '0' ]; then
		\git "$@"
	else
	    return 3;
	fi

	#if is a default git hook, like post-update set to true, to can be ignored by this script
	case $1 in
		update)
		is_default_hook=true;
		  ;;
		*)
		is_default_hook=false;
		  ;;
	esac

	#run post hooks
	run_post_hook "$@"
}

run_pre_hook() {

	#set pre hooks paths
	def_pre_hook="${git_dir_path}/hooks/pre-$1";
	custom_pre_hook="${SCRIPT_DIR}/hooks/pre-$1";

	if [ $1 == 'checkout' ] && [ $2 == '-b' ]; then
        custom_pre_hook="${SCRIPT_DIR}/hooks/pre-branch";
	fi

	#if pre hook is set on project then execute it and ignore the default one
    if [ -f $def_pre_hook ]; then
		#if the hook is one of the git default hooks, ignore it because is executed by git
		if [ ! $is_default_hook ]; then
			#execute pre hook if is custom one
			$def_pre_hook "$@"
		fi
	#if pre hook is not set on the project, check if is set on default hooks folder from this script
	elif [ -f $custom_pre_hook ]; then
		#execute the general custom pre hook
		$custom_pre_hook "$@"
	fi
}

run_post_hook() {

	#set post hooks paths
	def_post_hook="${git_dir_path}/hooks/post-$1"
	custom_post_hook="${SCRIPT_DIR}/hooks/post-$1"

	#if post hook is set on project then execute it and ignore the default one
    if [ -f $def_post_hook ]; then
		#if the hook is one of the git default hooks, ignore it because is executed by git
        if [ ! $is_default_hook ]; then
			#execute post hook if is custom one
            $def_post_hook "$@"
        fi
	#if post hook is not set on the project, check if is set on default hooks folder from this script
    elif [ -f $custom_post_hook ]; then
		#execute the general custom post hook
        $custom_post_hook "$@"
    fi
}




git_commit ()
{

	#get the current branch
	branch=$(git branch | sed -n -e 's/\* //p')
	branch=$(echo "$branch" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g')

	message="$*"

	if [[ $branch == [0-9]* ]]
	then
		message="#${branch} ${message}";
	fi

	if [ -z "$message" ]; then
	    printf "${BRed}Commit message is empty!\n${NC}Please  write a message!\n";
        while true; do
          read new_message
          case $new_message in
              "" ) echo "Please  write a message!";;
              * ) message=$new_message; break;;
          esac
        done
	fi

	git commit --no-edit -am "$message"
}
publish()
{
	br_to_pub=$1
	cur_branch=$(git branch | sed -n -e 's/\* //p')
	cur_branch=$(echo "$cur_branch" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g')

#   Compose the message
     if [[ ${cur_branch} != [0-9]* ]]; then
	    if [[ ${*:2} == [0-9]* ]]; then
	        message="#${*:2}"
	    else
	        message="${*:2}"
	    fi
	else
	    message="#${cur_branch} ${*:2}"
	fi

	if [ -z "$message" ]; then
	    printf "${BRed}Commit message is empty!\n${NC}Please  write a message!\n";
        while true; do
          read new_message
          case $new_message in
              "" ) echo "Please  write a message!";;
              * ) message=$new_message; break;;
          esac
        done
	fi

    ######################  COMMIT  ###########################

	printf "\n$BCyan--- Commit changes ---$NC\n"

	git commit  --no-edit -am "$message"
	exit_code="$?"
	if [ $exit_code -gt "1" ]; then
        return 1;
	fi

    ###########################################################

#    if we publish on the same branch we dont need to reset the code, just pull the changes
	if [ $cur_branch == $br_to_pub ]; then

        ######################  PULL  ###########################

        printf "\n$BCyan--- Pull changes from repo ---$NC\n"
        git pull

        exit_code="$?"
        if [ $exit_code -gt "0" ]; then
            if [ $exit_code -eq "1" ]; then
                printf " ${BRed} Aborted!\n ${NC}";
            fi
            return 1;
        fi

	else

        ######################  CHECKOUT  ###########################

        printf "\n$BCyan--- Checkout branch $br_to_pub ---$NC\n"
        git checkout "$br_to_pub"

        ck_branch=$(git branch | sed -n -e 's/\* //p')
        ck_branch=$(echo "$ck_branch" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g')

        if [ "$ck_branch" != "$br_to_pub" ]; then
            printf " ${BRed} Aborted!\n ${NC}";
            return 1;
        fi

        ######################  FETCH  ###########################

        printf "\n$BCyan--- Fetch changes from remote ---$NC\n"
        git fetch

        exit_code="$?"
        if [ $exit_code -gt "0" ]; then
            if [ $exit_code -eq "1" ]; then
                printf " ${BRed} Aborted!\n ${NC}";
            fi
            return 1;
        fi

        ######################  RESET  ###########################

        printf "\n$BCyan--- Reset to origin ---$NC\n"
        git reset --hard origin/$br_to_pub

        exit_code="$?"
        if [ $exit_code -gt "0" ]; then
            if [ $exit_code -eq "1" ]; then
                printf " ${BRed} Aborted!\n ${NC}";
            fi
            return 1;
        fi

        ######################  MERGE  ###########################

        printf "\n$BCyan--- Merge $cur_branch into $br_to_pub ---$NC\n"
        git merge "$cur_branch"

        exit_code="$?"
        if [ $exit_code -gt "0" ]; then
            if [ $exit_code -eq "1" ]; then
                printf " ${BRed} Aborted!\n ${NC}";
            fi

            printf "\n$BCyan--- Checkout branch $cur_branch ---$NC\n"
            git checkout "$cur_branch"
            return 1;
        fi
        ##########################################################

    fi

    ######################   PUSH   ###########################

	printf "\n$BCyan--- Push changes into $br_to_pub ---$NC\n"
	git push origin $br_to_pub

	exit_code="$?"
	if [ $exit_code -gt "0" ]; then
		if [ $exit_code -eq "1" ]; then
		    printf " ${BRed} Aborted!\n ${NC}";
        fi
        return 1;
	fi

    ######################   CHECKOUT   ######################

    #if we dont publish on the same branch, go back to branch where you was before publish
    if [ $cur_branch != $br_to_pub ]; then
        printf "\n$BCyan--- Checkout branch $cur_branch ---$NC\n"
        git checkout "$cur_branch"
	fi
}



alias git=custom_git
alias pb=publish
alias gc=git_commit
